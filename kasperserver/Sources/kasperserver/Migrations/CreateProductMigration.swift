import Fluent

struct CreateProductMigration: AsyncMigration {
    func prepare(on database: any Database) async throws {
        let brand = try await database.enum("brand")
            .case(Brand.NewBalance.rawValue)
            .case(Brand.Nike.rawValue)
            .case(Brand.Salomon.rawValue)
            .case(Brand.adidas.rawValue)
            .case(Brand.Asics.rawValue)
            .case(Brand.Hoka.rawValue)
            .case(Brand.Merrell.rawValue)
            .case(Brand.unknown.rawValue)
            .create()
        
        let size = try await database.enum("size")
            .case(Size.size36.rawValue)
            .case(Size.size36_5.rawValue)
            .case(Size.size37.rawValue)
            .case(Size.size37_5.rawValue)
            .case(Size.size38.rawValue)
            .case(Size.size38_5.rawValue)
            .case(Size.size39.rawValue)
            .case(Size.size39_5.rawValue)
            .case(Size.size40.rawValue)
            .case(Size.size40_5.rawValue)
            .case(Size.size41.rawValue)
            .case(Size.size41_5.rawValue)
            .case(Size.size42.rawValue)
            .case(Size.size42_5.rawValue)
            .case(Size.size43.rawValue)
            .case(Size.size43_5.rawValue)
            .case(Size.size44.rawValue)
            .case(Size.size44_5.rawValue)
            .case(Size.size45.rawValue)
            .case(Size.size45_5.rawValue)
            .case(Size.size46.rawValue)
            .case(Size.size46_5.rawValue)
            .case(Size.size47.rawValue)
            .case(Size.size47_5.rawValue)
            .case(Size.size48.rawValue)
            .case(Size.size48_5.rawValue)
            .case(Size.size49.rawValue)
            .case(Size.size49_5.rawValue)
            .case(Size.size50.rawValue)
            .case(Size.XS.rawValue)
            .case(Size.S.rawValue)
            .case(Size.M.rawValue)
            .case(Size.L.rawValue)
            .case(Size.XL.rawValue)
            .case(Size.XXL.rawValue)
            .create()
        
        
        try await database.schema(Product.schema)
            .id()
            .field("name", .string, .required)
            .field("sku", .int, .required)
            .unique(on: "sku")
            .field("description", .string)
            .field("brand", brand, .required)
            .field("size", size, .required)
            .field("purchase_price", .double, .required)
            .field("purchase_date", .date, .required)
            .field("sale_price", .double)
            .field("sale_date", .date)
            .field("sold", .bool, .required, .sql(.default(false)))
            .field("created_at", .datetime)
            .field("updated_at", .datetime)
            .field("deleted_at", .datetime)
            .create()
    }
    
    func revert(on database: any Database) async throws {
        try await database.schema(Product.schema).delete()
        //try await database.enum("brand").delete()
        //try await database.enum("size").delete()
    }
}
